@Injectable({ providedIn: 'root' })
export class TransactionDetailsService {
  private readonly BASE_API = `${environment.API}/transactions`;

  // 1Ô∏è‚É£ Dictionnaire de cache : "id" ‚Üí { date d‚Äôenregistrement, r√©sultat partag√© }
  private cache = new Map<number, { at: number; obs$: Observable<any> }>();

  // 2Ô∏è‚É£ Dur√©e de vie du cache (ici 5 minutes)
  private readonly TTL_MS = 5 * 60 * 1000;

  constructor(private http: HttpClient) {}

  // 3Ô∏è‚É£ M√©thode principale : r√©cup√®re une transaction (avec cache)
  getById(id: number, opts?: { force?: boolean }): Observable<any> {
    const force = !!opts?.force;
    const cached = this.cache.get(id);

    // üü¢ √âtape 1 : si on a d√©j√† la donn√©e et qu‚Äôelle n‚Äôa pas expir√© ‚Üí on la renvoie directement
    if (!force && cached && this.isFresh(cached.at)) {
      return cached.obs$;
    }

    // üîµ √âtape 2 : sinon on refait l‚Äôappel HTTP
    const obs$ = this.http.get<any>(`${this.BASE_API}/${id}`).pipe(
      // ‚úÖ shareReplay garde la derni√®re valeur en m√©moire pour tous les abonn√©s
      shareReplay({ bufferSize: 1, refCount: false }),

      // ‚ùå en cas d‚Äôerreur, on supprime du cache (on ne garde pas une erreur)
      catchError(err => {
        this.cache.delete(id);
        return throwError(() => err);
      })
    );

    // üü£ √âtape 3 : on stocke la nouvelle r√©ponse dans le cache
    this.cache.set(id, { at: Date.now(), obs$ });
    return obs$;
  }

  // 4Ô∏è‚É£ M√©thode utilitaire : r√©cup√®re plusieurs ids en une fois
  getMany(ids: number[]): Observable<any[]> {
    const unique = [...new Set(ids)];
    return forkJoin(unique.map(id => this.getById(id)));
  }

  // 5Ô∏è‚É£ Vide le cache (partiellement ou totalement)
  invalidate(ids?: number[]) {
    if (!ids || ids.length === 0) this.cache.clear();
    else ids.forEach(id => this.cache.delete(id));
  }

  // 6Ô∏è‚É£ V√©rifie si la donn√©e est encore "fra√Æche"
  private isFresh(at: number): boolean {
    return Date.now() - at < this.TTL_MS;
  }
}
